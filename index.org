#+TITLE: EconDatasets.jl
#+OPTIONS: eval:never-export
#+PROPERTY: exports both
#+PROPERTY: results value
#+PROPERTY: session *julia-docs*
#+OPTIONS: tangle:test/doctests.jl
#+OPTIONS: author:nil
#+OPTIONS: title:nil
#+OPTIONS: email:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: toc:yes
#+OPTIONS: html-doctype:html5

#+HTML_HEAD:  <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /> 
#+HTML_HEAD: <meta charset='utf-8'>
#+HTML_HEAD: <meta http-equiv="X-UA-Compatible" content="chrome=1">
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
#+HTML_HEAD: <link href='https://fonts.googleapis.com/css?family=Architects+Daughter' rel='stylesheet' type='text/css'>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" media="screen" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="stylesheets/pygment_trac.css" media="screen" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="stylesheets/print.css" media="print" />

#+HTML_HEAD_EXTRA: <header>
#+HTML_HEAD_EXTRA:  <div class="inner">
#+HTML_HEAD_EXTRA:         <h1>EconDatasets.jl</h1>
#+HTML_HEAD_EXTRA:         <h2>EconDatasets package for Julia language</h2>
#+HTML_HEAD_EXTRA:         <a href="https://github.com/JuliaFinMetriX/EconDatasets.jl" class="button"><small>View project on</small>GitHub</a>
#+HTML_HEAD_EXTRA:       </div>
#+HTML_HEAD_EXTRA:     </header>


#+HTML_HEAD_EXTRA:     <div id="content-wrapper">
#+HTML_HEAD_EXTRA:       <div class="inner clearfix">
#+HTML_HEAD_EXTRA: <aside id="sidebar">
#+HTML_HEAD_EXTRA:    <a href="https://github.com/JuliaFinMetriX">
#+HTML_HEAD_EXTRA:    <img src="./logo.png" width="200" height="114">
#+HTML_HEAD_EXTRA:    </a>
#+HTML_HEAD_EXTRA:    <a href="https://github.com/JuliaFinMetriX/EconDatasets.jl/zipball/master" class="button">
#+HTML_HEAD_EXTRA:      <small>Download</small>
#+HTML_HEAD_EXTRA:      .zip file
#+HTML_HEAD_EXTRA:    </a>
#+HTML_HEAD_EXTRA:    <a href="https://github.com/JuliaFinMetriX/EconDatasets.jl/tarball/master" class="button">
#+HTML_HEAD_EXTRA:      <small>Download</small>
#+HTML_HEAD_EXTRA:      .tar.gz file
#+HTML_HEAD_EXTRA:    </a>
#+HTML_HEAD_EXTRA:     <p class="repo-owner"><a href="https://github.com/JuliaFinMetriX/EconDatasets.jl"></a> maintained by <a href="https://github.com/cgroll">cgroll</a>.</p>
#+HTML_HEAD_EXTRA:  </aside>
#+HTML_HEAD_EXTRA:         <section id="main-content">
#+HTML_HEAD_EXTRA:           <div>


#+BEGIN_COMMENT
Manual post-processing:
- removing the h1 title in the html. This is the second time that the
  word title occurs.  

- copy index.html file to gh-pages branch:
  - git checkout gh-pages
  - git checkout master index.html
  - git commit index.html
#+END_COMMENT

#+BEGIN_SRC julia :exports none :results output :tangle test/doctests.jl
module TestDocumentation

using Base.Test
using DataArrays
using DataFrames

println("\n Running documentation tests\n")

#+END_SRC

* Motivation

The package shall make various econometric data sets accessible,
similar to the way that the [[https://github.com/johnmyleswhite/RDatasets.jl][RDatasets]] package provides access to
standard data sets that are available in R.

The problem with some econometric data sets, however, is that although
data is freely available at the web, it is not allowed to redistribute
the data set. Hence, some of the data sets are not shipped
automatically with the package, but they need to be downloaded into
the package's data directory first.

Once a given data set is downloaded, it can be loaded in Julia with a
syntax similar to ~RDatasets~:

#+BEGIN_SRC julia
using EconDatasets
sectors = dataset("Sectors")
#+END_SRC

In order to download a given data set, one needs to use call function
~getDataset~ first. This way, data is downloaded into the data
directory of the package, making it accessible for future use with
function ~dataset~.
#+BEGIN_SRC julia
getDataset("FFF") # Fama French factors
#+END_SRC

In addition, there also exist functions that directly load data into
an interactive Julia session, without storing them on disk for future
use. For some of these data sets, however, some minor manual
interaction might be required to label and process the data
adequately. 


* Table of data sets

| Name        | Description                              |
|-------------+------------------------------------------|
| Sectors     | Sector affiliations for SP500 components |
| SP500       | Stock price data for SP500 components    |
| UMD         | Fama French momentum portfolio           |
| FFF         | Fama French factors                      |
| SP500Ticker | SP500 ticker symbols from Wikipedia      |
| [[http://juliafinmetrix.github.io/EconDatasets.jl/data_description_indices.md][Indices]]     | Major stock price indices                |
| Treasuries  | US Treasury rates, several maturities    |
| DieboldLi   | fixed-maturity yields used in Diebold-Li |
|-------------+------------------------------------------|

From these data sets, only the following ones are already included in
the repository: 
- Sectors
- SP500Ticker

* Data sets to be downloaded first

The following data sets do not ship with the package, as they may not
be re-distributed. Hence, they need to be downloaded first. This can
be done with function ~getDataset~. Some of these data sets will call
a script and not a function, so they will create some variables in
your workspace. Also, if running the scripts through the high level
function ~getDataset~ causes an error, it still might work if you run
the script with ~include~:

#+BEGIN_SRC julia
include(joinpath(Pkg.dir("EconDatasets"), "src/getDataset/", "getSP500.jl"))
#+END_SRC

- Data sets downloaded by functions
  - FFF
  - UMD
  - Indices
  - Treasuries
  - DieboldLi
- Data sets downloaded by scripts
  - SP500 (due to parallel computing)
  - SP500Ticker (due to Gumbo package usage)

* Table of functions to interactively download data

| Name                | Description        |
|---------------------+--------------------|
| ~readFamaFrench~    |                    |
| ~readFamaFrenchRaw~ | see [[http://nbviewer.ipython.org/github/JuliaFinMetriX/EconDatasets.jl/blob/master/ijulia_tutorials/readFamaFrenchRaw.ipynb][ijulia example]] |
| ~readYahooFinance~  | see [[http://grollchristian.wordpress.com/2014/09/05/sp500-data-download-julia/][blog post]]      |
| ~readYahooAdjClose~ | see [[http://grollchristian.wordpress.com/2014/09/05/sp500-data-download-julia/][blog post]]      |
| ~getAdjClose~       |                    |
| ~readUSTreasuries~  |                    |
|---------------------+--------------------|


* Acknowledgement

Of course, any package can only be as good as the individual parts
that it builds on. Accordingly, I'd like to thank all people that
were involved in the development of all the functions that were made
ready to use for me to build this package upon. In particular, I want
to thank the developers of
- the *Julia language*, for their continuous and tremendous efforts
  during the creation of this free, fast and highly flexible
  programming language!
- the *DataFrames* package, which definitely provides the best
  representation for general types of data in data analysis. It's a
  role model that every last bit of code of ~TimeData~ depends on, and
  the interface that every statistics package should use.
- the *Datetime* package, which is a thoughtful implementation of
  dates, time and durations, and the backbone of all time components
  in ~TimeData~.
- the *TimeSeries* package, which follows a different approach to
  handling time series data. Having a quite similar goal in mind, the
  package was a great inspiration for me, and occasionally I even
  could borrow parts of code from it (for example, from an old version
  of function ~readtime~).

#+BEGIN_SRC julia :exports none :results output :tangle test/doctests.jl
end
#+END_SRC
